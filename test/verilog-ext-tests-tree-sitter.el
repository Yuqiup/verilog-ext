;;; verilog-ext-tests-tree-sitter.el --- Verilog-Ext ERT tree-sitter tests  -*- lexical-binding: t -*-

;; Copyright (C) 2022-2023 Gonzalo Larumbe

;; Author: Gonzalo Larumbe <gonzalomlarumbe@gmail.com>
;; URL: https://github.com/gmlarumbe/verilog-ext

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; ERT Tree-sitter tests:
;;
;;; Code:


(require 'verilog-ext-tests-font-lock)
(require 'verilog-ext-tests-indent)
(require 'verilog-ext-tests-hierarchy)
(require 'verilog-ext-tests-beautify)
(require 'verilog-ext-tests-tags)


(ert-deftest tree-sitter::font-lock ()
  (let ((default-directory verilog-ext-tests-common-dir)
        (faceup-test-explain t))
    (dolist (file (directory-files verilog-ext-tests-common-dir nil ".s?vh?$"))
      (should (eq t (verilog-ext-test-font-lock-test-file file :tree-sitter))))))

(ert-deftest tree-sitter::indentation ()
  (let ((test-files verilog-ext-tests-indent-test-files))
    (delete-directory verilog-ext-tests-indent-dump-dir :recursive)
    (make-directory verilog-ext-tests-indent-dump-dir :parents)
    (dolist (file test-files)
      (should (verilog-ext-test-indent-compare file :tree-sitter)))))

(ert-deftest hierarchy::tree-sitter-hierarchy ()
  (let ((verilog-ext-hierarchy-backend  'tree-sitter)
        (verilog-ext-hierarchy-frontend 'hierarchy))
    (should (string= (with-temp-buffer
                       (hierarchy-print (verilog-ext-test-hierarchy) (lambda (node) node))
                       (buffer-substring-no-properties (point-min) (point-max)))
"instances
  instances.block0:I_BLOCK0
  instances.block1:I_BLOCK1
  instances.block2:I_BLOCK2
  instances.block3:I_BLOCK3
  instances.test_if:I_TEST_IF
  instances.test_if_params:ITEST_IF_PARAMS
  instances.test_if_params_array:ITEST_IF_PARAMS_ARRAY[5:0]
  instances.test_if_params_empty:I_TEST_IF_PARAMS_EMPTY
  instances.block_ws_0:I_BLOCK_WS_0
  instances.block_ws_1:I_BLOCK_WS_1
"))))

(ert-deftest hierarchy::tree-sitter-outshine ()
  (let ((verilog-ext-hierarchy-backend  'tree-sitter)
        (verilog-ext-hierarchy-frontend 'outshine))
    (should (equal (verilog-ext-test-hierarchy)
"// Hierarchy generated by `verilog-ext'

// * instances
// ** block0
// ** block1
// ** block2
// ** block3
// ** test_if
// ** test_if_params
// ** test_if_params_array[5:0]
// ** test_if_params_empty
// ** block_ws_0
// ** block_ws_1


// * Buffer local variables
// Local Variables:
// eval: (verilog-mode 1)
// eval: (verilog-ext-hierarchy-outshine-nav-mode 1)
// End:
"))))

(ert-deftest tree-sitter::beautify ()
  (let ((test-files verilog-ext-tests-beautify-test-files))
    (delete-directory verilog-ext-tests-beautify-dump-dir :recursive)
    (make-directory verilog-ext-tests-beautify-dump-dir :parents)
    (dolist (file test-files)
      (should (verilog-ext-test-beautify-compare file :tree-sitter)))))

(ert-deftest tree-sitter::tags::definitions ()
  (let ((alist verilog-ext-tests-tags-files-alist)
        file tag-type defs)
    (dolist (elm alist)
      (setq file (car elm))
      (setq tag-type (cdr elm))
      (setq defs (with-temp-buffer
                   (insert-file-contents (verilog-ext-tests-tags-ref-file-from-orig file 'defs :tree-sitter))
                   (read (buffer-string))))
      (should (hash-equal defs (verilog-ext-test-tags-defs-file file tag-type :tree-sitter))))))

(ert-deftest tree-sitter::tags::references ()
  (let ((alist verilog-ext-tests-tags-files-alist)
        file tag-type refs)
    (dolist (elm alist)
      (setq file (car elm))
      (setq tag-type (cdr elm))
      (setq refs (with-temp-buffer
                   (insert-file-contents (verilog-ext-tests-tags-ref-file-from-orig file 'refs :tree-sitter))
                   (read (buffer-string))))
      (should (hash-equal refs (verilog-ext-test-tags-refs-file file tag-type :tree-sitter))))))


;;; Tree-sitter specific tests
;;;; Prettify
(defconst verilog-ext-tests-tree-sitter-pretty-dump-diff-on-error t)
(defconst verilog-ext-tests-tree-sitter-pretty-dir (file-name-concat verilog-ext-tests-tree-sitter-dir "pretty"))
(defconst verilog-ext-tests-tree-sitter-pretty-dump-dir (file-name-concat verilog-ext-tests-tree-sitter-pretty-dir "dump"))
(defconst verilog-ext-tests-tree-sitter-pretty-declarations-file-lines
  '(10 27))
(defconst verilog-ext-tests-tree-sitter-pretty-expr-file-lines
  '(5 16 20 30 64 73 102 119))

(defun verilog-ext-tests-tree-sitter-pretty-buffer-positions (file-line-list type)
  "Prettify current buffer positions of FILE-LINE-LIST with TYPE."
  (dolist (line-num file-line-list)
    (goto-char (point-min))
    (forward-line (1- line-num))
    (cond ((eq type 'declarations)
           (verilog-ts-pretty-declarations))
          ((eq type 'expr)
           (verilog-ts-pretty-expr))
          (t
           (error "Wrong type!")))))

(defun verilog-ext-tests-tree-sitter-pretty-ref-file-from-orig (file)
  (concat (file-name-nondirectory (file-name-sans-extension file)) ".ts.pretty.sv"))

(defun verilog-ext-tests-tree-sitter-pretty-gen-expected-files ()
  (let* ((verilog-ext-time-stamp-pattern nil) ; Prevent auto-update of timestamp
         (indent-tabs-mode nil)
         (orig-dir verilog-ext-tests-tree-sitter-pretty-dir)
         (dest-dir (file-name-concat verilog-ext-tests-tree-sitter-pretty-dir "ref"))
         (declarations-file (file-name-concat orig-dir "pretty-declarations.sv"))
         (expr-file (file-name-concat orig-dir "pretty-expr.sv")))
    ;; Declarations
    (with-temp-file (file-name-concat dest-dir (verilog-ext-tests-tree-sitter-pretty-ref-file-from-orig declarations-file))
      (insert-file-contents declarations-file)
      (verilog-ext-tests-tree-sitter-pretty-buffer-positions verilog-ext-tests-tree-sitter-pretty-declarations-file-lines 'declarations))
    ;; Expresions
    (with-temp-file (file-name-concat dest-dir (verilog-ext-tests-tree-sitter-pretty-ref-file-from-orig expr-file))
      (insert-file-contents expr-file)
      (verilog-ext-tests-tree-sitter-pretty-buffer-positions verilog-ext-tests-tree-sitter-pretty-expr-file-lines 'expr))))

(defun verilog-ext-tests-tree-sitter-pretty-file (file type)
  (let ((debug nil)
        (indent-tabs-mode nil)
        (dump-file (file-name-concat verilog-ext-tests-tree-sitter-pretty-dump-dir file))
        file-line-list pretty-func)
    (cond ((eq type 'declarations)
           (setq file-line-list verilog-ext-tests-tree-sitter-pretty-declarations-file-lines)
           (setq pretty-func #'verilog-ts-pretty-declarations))
          ((eq type 'expr)
           (setq file-line-list verilog-ext-tests-tree-sitter-pretty-expr-file-lines)
           (setq pretty-func #'verilog-ts-pretty-expr))
          (t
           (error "Wrong type!")))
    (cl-letf (((symbol-function 'message)
               (lambda (FORMAT-STRING &rest ARGS)
                 nil))) ; Mock `message' to silence all the indentation reporting
      (with-temp-file dump-file
        (when debug
          (clone-indirect-buffer-other-window "*debug*" t))
        (insert-file-contents (file-name-concat verilog-ext-tests-tree-sitter-pretty-dir file))
        (verilog-ts-mode)
        (dolist (line-num file-line-list)
          (goto-char (point-min))
          (forward-line (1- line-num))
          (funcall pretty-func))
        dump-file))))

(defun verilog-ext-tests-tree-sitter-pretty-compare (file type)
  "Compare prettyfied FILE.
Reference prettyfied version: file.pretty.sv in tree-sitter dir."
  (let ((filename-prettified (verilog-ext-tests-tree-sitter-pretty-file file type)) ; Dump file
        (filename-ref (file-name-concat verilog-ext-tests-tree-sitter-pretty-dir "ref" (verilog-ext-tests-tree-sitter-pretty-ref-file-from-orig file))))
    (if (equal (with-temp-buffer
                 (insert-file-contents filename-prettified)
                 (buffer-substring-no-properties (point-min) (point-max)))
               (with-temp-buffer
                 (insert-file-contents filename-ref)
                 (buffer-substring-no-properties (point-min) (point-max))))
        (progn
          (delete-file filename-prettified)
          t)
      ;; Dump on error if enabled
      (when verilog-ext-tests-tree-sitter-pretty-dump-diff-on-error
        (shell-command (concat
                        "diff " filename-ref " " filename-prettified " > " (concat (file-name-sans-extension filename-prettified)) ".diff")))
      nil)))

(ert-deftest tree-sitter::prettify ()
  (let ((test-files '("pretty-declarations.sv" "pretty-expr.sv")))
    (delete-directory verilog-ext-tests-tree-sitter-pretty-dump-dir :recursive)
    (make-directory verilog-ext-tests-tree-sitter-pretty-dump-dir :parents)
    (should (verilog-ext-tests-tree-sitter-pretty-compare "pretty-declarations.sv" 'declarations))
    (should (verilog-ext-tests-tree-sitter-pretty-compare "pretty-expr.sv" 'expr))))


(provide 'verilog-ext-tests-tree-sitter)

;;; verilog-ext-tests-tree-sitter.el ends here

